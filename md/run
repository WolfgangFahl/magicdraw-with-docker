#!/bin/bash
# WF 2019-04-03
# updated 2024-11-20
imagename=md16o
containername=$imagename
VERSION="0.2"

# Color definitions
blue='\033[0;34m'
red='\033[0;31m'
green='\033[0;32m'
endColor='\033[0m'

# Function to display colored messages
color_msg() {
  local l_color="$1"
  local l_msg="$2"
  echo -e "${l_color}$l_msg${endColor}"
}

# Function to display errors
error() {
  local l_msg="$1"
  color_msg $red "Error:" 1>&2
  color_msg $red "\t$l_msg" 1>&2
  exit 1
}

# Function to display negative messages
negative() {
  local l_msg="$1"
  color_msg $red "❌:$l_msg"
}

# Function to display positive messages
positive() {
  local l_msg="$1"
  color_msg $green "✅:$l_msg"
}

# Function to display usage information
usage() {
  echo "Usage: $0 [OPTIONS]"
  echo "Options:"
  echo "  -h, --help         Show this help message"
  echo "  -b, --bash         Open a Bash session in the Docker container"
  echo "  -d, --debug        Enable debug mode (set -x)"
  echo "  -k, --kill         Stop and remove the Docker container"
  echo "  -r, --run          Run the MagicDraw Docker container"
  echo "  -s, --restart      Restart the Docker container if it exists"
  echo "  -v, --version      Show version information"
  exit 1
}

# Check if the Docker container exists, with optional message
container_exists() {
  local l_msg="$1"
  if docker ps -a --format '{{.Names}}' | grep -q "^$containername$"; then
    [[ -n "$l_msg" ]] && color_msg $blue "$l_msg"
    return 0
  fi
  return 1
}

# Use socat for port 6000
port6000() {
  echo "checking port 6000"
  lsof -i TCP:6000
  if [ $? -ne 0 ]; then
    socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:"$DISPLAY" &
  fi
}

# Stop and remove the Docker container if it exists
kill_docker() {
  if container_exists "Stopping and removing existing container: $containername"; then
    docker stop $containername &>/dev/null
    docker rm $containername &>/dev/null
    positive "Container $containername successfully stopped and removed."
  else
    positive "No existing container with the name $containername found."
  fi
}

# Bash into the Docker container if it exists
bash_docker() {
  if container_exists "Starting a Bash session in the container: $containername"; then
    docker exec -it $containername /bin/bash
    positive "Bash session exited successfully."
  else
    negative "Container $containername does not exist. Start the container first."
  fi
}

# Restart the Docker container if it exists
restart_docker() {
  if container_exists "Restarting container: $containername"; then
    docker restart $containername
    positive "Container $containername restarted successfully."
  else
    negative "Container $containername does not exist. Use -r to create and run the container."
  fi
}

# Run MagicDraw 16.9 in a Docker container
run_docker() {
  echo "DISPLAY=$DISPLAY"

  os=$(uname -a)
  case $os in
    Linux*)
      dockerdisplay=$DISPLAY
      n="--net=host"
      v="-v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME/.Xauthority:/root/.Xauthority:rw";;
    Darwin*)
      port6000
      dockerdisplay=docker.for.mac.host.internal:0
      v=""
      n="";;
  esac

  if container_exists; then
    if docker ps --format '{{.Names}}' | grep -q "^$containername$"; then
      positive "Container $containername is already running."
    else
      color_msg $blue "Starting stopped container: $containername"
      docker start $containername
      positive "Container $containername started successfully."
    fi
  else
    color_msg $blue "Creating and starting a new container: $containername"
    docker run --name $containername -e DISPLAY=$dockerdisplay $n $v -v $HOME/:/home/$USER bitplan/$imagename:latest
  fi
}

# Show usage if no arguments are provided
if [[ $# -eq 0 ]]; then
  usage
fi

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) usage ;;
    -b|--bash) bash_docker ;;
    -k|--kill) kill_docker ;;
    -r|--run) run_docker ;;
    -s|--restart) restart_docker ;;
    -v|--version) color_msg $green "Version: $VERSION" ;;
    -d|--debug) set -x ;;
    *) negative "Unknown option: $1"; usage ;;
  esac
  shift
done
